fit <- nls(y ~ SSasymp(t, g, y0, lig_alpha), data = sensor1)
fit
fit <- nls(y ~ SSasymp(t, g, pl, log_alpha), data = sensor1)
fit
View(sensor1)
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
source("exec/util.R")
#Importing data
df <- read.csv("data/decomp_data.csv")
sitedf <- read.csv("data/site_contents.csv")[,c(1,4)]
df <- merge(df, sitedf, by = "tag")
df$SLC <- interaction(as.factor(df$site), as.factor(df$class))
df$PercMassRemaining <- 1 - (df$init_total_mass - df$post_total_mass)/df$init_mass_litter
df$post_litter_mass = df$init_mass_litter - df$mass_loss
# direct estimate of alpha for each measurement point
# this function lives in "exec/util.R" and is read in via the source() call above
df$alpha_est <- get_alpha(df$PercMassRemaining, df$days_to_collection)
# plotting alpha estimates.  Notice that they get more constrained over time.
# in a perfect dataset with no noise, you'd expect that each point within a group/treatment/etc
# produces the exact same alpha -- it should be a horizontal line over time.
ggplot(data = df) +
aes(x = days_to_collection, y = alpha_est) +
geom_point() +
facet_wrap(vars(treatment))
# here's a NLS example without self-starting.
cool_model <- nls(
post_litter_mass ~ init_mass_litter * exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.008)
)
noa_model <- nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.002)
)
#reading out the alpha value and residual sum of squares
noa_model
#one last time
fit <- nls(PercMassRemaining ~ SSasymp(days_to_collection, g, pl, log_alpha), data = df)
t = 1:100
y1 = 22 + (53 - 22) * exp(-0.02 * t) %>% jitter(10)
y2 = 24 + (60 - 24) * exp(-0.01 * t) %>% jitter(10)
df_internet <- tibble(t = t, y = y1, sensor = 'sensor1') %>%
rbind(. , data.frame(t = t, y = y2, sensor = 'sensor2'))
sensor1 <- df %>% filter(sensor == 'sensor1')
sensor1 <- df %>% filter(sensor == 'sensor1')
sensor1 <- df_internet %>% filter(sensor == 'sensor1')
nls(y ~ yf + (y0 - yf) * exp(-alpha * t),
data = sensor1,
start = list(y0 = 54, yf = 25, alpha = 1))
fit <- nls(y ~ SSasymp(t, g, pl, log_alpha), data = sensor1)
#one last time
fit <- nls(PercMassRemaining ~ SSasymp(days_to_collection, g, pl, log_alpha), data = df %>% filter(treatment == "Morella"))
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
fitted <- df %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
fitted <- df_internet %>%
nest(sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
tidied = map(fit, tidy),
start = list(a = 0.002)),
augmented = map(fit, augment),
alpha_treatment_table
data = .,
tidied = map(fit, tidy),
)
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment)
View(treatment_alphas)
View(treatment_alphas[[2]][[1]])
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002)))
tidied = map(fit, tidy),
start = list(a = 0.002))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002))))
View(treatment_alphas)
View(treatment_alphas[[3]][[1]])
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .))))
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)))
View(fitted)
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002))))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002)),
tidied = map(fit, tidy)))
augmented = map(fit, augment))
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
augmented = map(fit, augment),)
augmented = map(fit, augment))
augmented = map(fit, augment),)
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002)),
tidied = map(fit, tidy),
augmented = map(fit, augment),))
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002)),
tidied = map(fit, tidy),
augmented = map(fit, augment),))
View(treatment_alphas)
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
View(treatment_alphas)
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002)),
Tidied = map(fit, tidy),
Augmented = map(fit, augment),))
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy))
View(fitted)
View(fitted[[4]][[1]])
View(fitted[[3]][[1]])
View(treatment_alphas[[3]][[1]])
View(fitted[[3]][[1]])
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
fitted <- df_internet %>%
nest(-sensor) %>%
mutate(
fit = map(data, ~nls(y ~ SSasymp(t, yf, y0, log_alpha), data = .)),
tidied = map(fit, tidy),
augmented = map(fit, augment),
)
View(fitted)
View(fitted[[5]][[1]])
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(
data, ~nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = .,
start = list(a = 0.002)),
tidied = map(fit, tidy),
Augmented = map(fit, augment),))
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002)),)
tidied = map(fit, tidy),
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),))
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),)
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate) %>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
treatment_alphas %>%
unnest(tidied)
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied)
%>%
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate)%>%
spread(term, estimate)
# Produce a table of fit parameters: y0, yf, alpha
fitted %>%
unnest(tidied) %>%
select(sensor, term, estimate)%>%
spread(term, estimate) %>%
mutate(alpha = exp(log_alpha))
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate)
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),)%>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),)
treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
treatment_alphas_tbl <- treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
treatment_alphas_tbl
#Iterating model for all Site/Treatment combos
SLC_alphas <- df %>%
nest(-SLC) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),)
treatment_alphas_tbl <-
SLC_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
treatment_alphas_tbl <-
SLC_alphas %>%
unnest(tidied) %>%
select(SLC, term, estimate) %>%
spread(term, estimate)
SLC_alphas_tbl <-
SLC_alphas %>%
unnest(tidied) %>%
select(SLC, term, estimate) %>%
spread(term, estimate)
SLC_alphas_tbl
#Iterating model for all treatments
treatment_alphas <- df %>%
nest(-treatment) %>%
mutate(
fit = map(data, ~nls(PercMassRemaining ~ 1* exp(-a * days_to_collection), data = ., start = list(a = 0.002))),
tidied = map(fit, tidy),
Augmented = map(fit, augment),)
treatment_alphas_tbl <- treatment_alphas %>%
unnest(tidied) %>%
select(treatment, term, estimate) %>%
spread(term, estimate)
# here's a NLS example without self-starting.
cool_model <- nls(
post_litter_mass ~ init_mass_litter * exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.008)
)
# here's a NLS example without self-starting.
cool_model <- nls(
post_litter_mass ~ init_mass_litter * exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.0008)
)
cool_model
# here's a NLS example without self-starting.
cool_model <- nls(
post_litter_mass ~ init_mass_litter * exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.0008)
)
cool_model
# here's a NLS example without self-starting.
cool_model <- nls(
post_litter_mass ~ init_mass_litter * exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.002)
)
cool_model
noa_model <- nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.002)
)
#reading out the alpha value and residual sum of squares
noa_model
noa_model <- nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.0008)
)
#reading out the alpha value and residual sum of squares
noa_model
#Noa makes the same model but with percents. Has a lower residual sum of squares so kept it.
noa_model <- nls(
PercMassRemaining ~ 1* exp(-a * days_to_collection),
data = df %>% filter(treatment == "Morella"),
start = list(a = 0.0008)
)
#reading out the alpha value and residual sum of squares
noa_model
#trying to do self-starting model... still isn't working :-/
fit <- nls(PercMassRemaining ~ SSasymp(days_to_collection, g, pl, log_alpha), data = df %>% filter(treatment == "Morella"))
#printing tables of alpha values
treatment_alphas_tbl
SLC_alphas_tbl
plot(treatment_alphas_tbl$a)
plot(treatment_alphas_tbl$a, treatment_alphas_tbl$treatment)
plot(treatment_alphas_tbl$a, treatment_alphas_tbl$treatment)
plot(treatment_alphas_tbl$a, by = treatment_alphas_tbl$treatment)
ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + geom_point()
ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + geom_point()
theme(axis.text.x = element_text(angle = 90)) + geom_point()
theme(axis.text.x = element_text(angle = 90)
ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + geom_point() +
p <- ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + geom_point()
p + theme(axis.text.x = element_text(angle = 90))
q + + theme(axis.text.x = element_text(angle = 90))
q + theme(axis.text.x = element_text(angle = 90))
q <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a))
q + theme(axis.text.x = element_text(angle = 90))
q + theme(axis.text.x = element_text(angle = 90), add = TRUE)
q <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a))
q + theme(axis.text.x = element_text(angle = 90))
q <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a))
q
q <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + geom_point()
q <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + geom_point()
q
q + theme(axis.text.x = element_text(angle = 90))
ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
treatment_plot <- ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
SLC_plot <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
#printing tables and then graphs (rudimentary) of alpha values
treatment_alphas_tbl
SLC_alphas_tbl
treatment_plot <- ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
SLC_plot <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
plot(
x = df[which(df$treatment == "Morella"),"days_to_collection"],
y = df[which(df$treatment == "Morella"),"PercMassRemaining"])
#printing tables and then graphs (rudimentary) of alpha values
treatment_alphas_tbl
curve(curve(x^-0.000665, from=0, to=365, add=TRUE, col = "violet"))
curve(curve(x^-0.00665, from=0, to=365, add=TRUE, col = "violet"))
treatment_plot <- ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
SLC_plot <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
treatment_plot <- ggplot(data = treatment_alphas_tbl, aes(x = treatment, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
SLC_plot <- ggplot(data = SLC_alphas_tbl, aes(x = SLC, y = a)) + theme(axis.text.x = element_text(angle = 90)) + geom_point()
